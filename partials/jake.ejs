<meta charset="utf-8">
<style>

    circle,
    path {
        cursor: pointer;
    }

    circle {
        fill: none;
        pointer-events: all;
    }

    #tooltip { background-color: white;
        color: black;
        padding: 3px 5px;
        border: 1px solid black;
        text-align: center;
    }

    html {
        font-family: sans-serif;
    }

    ul {
        margin: 20px;
        list-style-type: none;
    }

    .input-color {
        position: relative;
        padding-left: 30px;
    }
    .input-color input {
        padding-left: 20px;

    }
    .input-color .color-box {
        width: 10px;
        height: 10px;
        position: absolute;
        left: 5px;
        top: 5px;
    }
</style>
<script src="http://d3js.org/d3.v3.min.js"></script>
<div id='sunburst'></div>
<div class="col-sm-9 col-sm-offset-3 col-md-12 col-md-offset-1 main">
    <div class="row placeholders-1">
    <div id="sunburst1" style="background-color: #121212;margin: 5px; padding: 20px;">
        <h3 style="text-align:left;">Top 50</h3>
        <ul>
            <li>
                <div class="input-color">
                    <div class="color-box" style="background-color: #009E73; float: left;"></div>
                    <div style="float: left;">Artists
                    </div>
                </div>
                <div style="color: #0c1508;">a</div>
            </li>
            <li>
                <div class="input-color">
                    <div class="color-box" style="background-color: #4682B4; float: left;"></div>
                    <div style="float: left;">Albums</div>
                </div>
                <div style="color: #0c1508;">a</div>
            </li>
            <li>
                <div class="input-color">
                    <div class="color-box" style="background-color: #F0E442; float: left;"></div>
                    <div style="float: left;">Tracks</div>
                </div>
            </li>
        </ul>
        <script type="text/javascript">
            var margin = {top: 350, right: 480, bottom: 350, left: 480},
                radius = Math.min(margin.top, margin.right, margin.bottom, margin.left) - 10;

            function filter_min_arc_size_text(d, i) {return (d.dx*d.depth*radius/3)>14}

            var hue = d3.scale.ordinal(0, 1, 2).range(["#F0E442", "#009E73", "#4682B4"]);

            var luminance = d3.scale.sqrt()
                .domain([0, 30])
                .clamp(true)
                .range([75, 35]);

            var svg = d3.select("#sunburst1").append("svg")
                .attr("width", margin.left + margin.right)
                .attr("height", margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


            var partition = d3.layout.partition()
                .sort(function(a, b) { return d3.ascending(a.name, b.name); })
                .size([2 * Math.PI, radius]);

            var arc = d3.svg.arc()
                .startAngle(function(d) { return d.x; })
                .endAngle(function(d) { return d.x + d.dx - .01 / (d.depth + .5); })
                .innerRadius(function(d) { return radius / 3 * d.depth; })
                .outerRadius(function(d) { return radius / 3 * (d.depth + 1) - 1; });

            //Tooltip description
            var tooltip = d3.select("body")
                .append("div")
                .attr("id", "tooltip")
                .style("position", "absolute")
                .style("z-index", "10")
                .style("opacity", 0.9);

            function format_number(x) {
                return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            }


            function format_description(d) {
                var description = d.description;
                return  '<b>' + d.description + '</b> <br> # of times in top 50: (' + format_number(d.value) + ')';
            }

            function computeTextRotation(d) {
                return (d.x +d.dx/2)*180/Math.PI - 90;
            }

            function mouseOverArc(d) {
                d3.select(this).attr("stroke","black");

                tooltip.html(format_description(d));
                return tooltip.transition()
                    .duration(50)
                    .style("opacity", 0.9);
            }

            function mouseOutArc(){
                d3.select(this).attr("stroke","")
                return tooltip.style("opacity", 0);
            }

            function mouseMoveArc(d) {
                return tooltip
                    .style("top", (d3.event.pageY-10)+"px")
                    .style("left", (d3.event.pageX+10)+"px");
            }


            var root = <%- sunDat %>

            // Compute the initial layout on the entire tree to sum sizes.
            // Also compute the full name and fill color for each node,
            // and stash the children so they can be restored as we descend.

            partition
                .value(function(d) { return d.size; })
                .nodes(root)
                .forEach(function(d) {
                    d._children = d.children;
                    d.sum = d.value;
                    d.lev = d.level;
                    d.key = key(d);
                    d.fill = fill(d);
                });

            // Now redefine the value function to use the previously-computed sum.
            partition
                .children(function(d, depth) { return depth < 2 ? d._children : null; })
                .value(function(d) { return d.sum; });

            var center = svg.append("circle")
                .attr("r", radius / 3)
                .on("click", zoomOut);

            center.append("title")
                .text("zoom out");

            var partitioned_data=partition.nodes(root).slice(1)

            var path = svg.selectAll("path")
                .data(partitioned_data)
                .enter().append("path")
                .attr("d", arc)
                .style("fill", function(d) { return d.fill; })
                .each(function(d) { this._current = updateArc(d); })
                .on("click", zoomIn)
                .on("mouseover", mouseOverArc)
                .on("mousemove", mouseMoveArc)
                .on("mouseout", mouseOutArc);

            var texts = svg.selectAll("text")
                .data(partitioned_data)
                .enter().append("text")
                .filter(filter_min_arc_size_text)
                .attr("transform", function(d) { return "rotate(" + computeTextRotation(d) + ")"; })
                .attr("x", function(d) { return radius / 3 * d.depth; })
                .attr("dx", "6") // margin
                .attr("dy", ".35em") // vertical-align
                .text(function(d,i) {return d.name})

            function zoomIn(p) {
                if (p.depth > 1) p = p.parent;
                if (!p.children) return;
                zoom(p, p);
            }

            function zoomOut(p) {
                if (!p.parent) return;
                zoom(p.parent, p);
            }

            // Zoom to the specified new root.
            function zoom(root, p) {
                if (document.documentElement.__transition__) return;

                // Rescale outside angles to match the new layout.
                var enterArc,
                    exitArc,
                    outsideAngle = d3.scale.linear().domain([0, 2 * Math.PI]);

                function insideArc(d) {
                    return p.key > d.key
                        ? {depth: d.depth - 1, x: 0, dx: 0} : p.key < d.key
                            ? {depth: d.depth - 1, x: 2 * Math.PI, dx: 0}
                            : {depth: 0, x: 0, dx: 2 * Math.PI};
                }

                function outsideArc(d) {
                    return {depth: d.depth + 1, x: outsideAngle(d.x), dx: outsideAngle(d.x + d.dx) - outsideAngle(d.x)};
                }

                center.datum(root);

                // When zooming in, arcs enter from the outside and exit to the inside.
                // Entering outside arcs start from the old layout.
                if (root === p) enterArc = outsideArc, exitArc = insideArc, outsideAngle.range([p.x, p.x + p.dx]);

                var new_data = partition.nodes(root).slice(1)

                path = path.data(new_data, function(d) { return d.key; });

                // When zooming out, arcs enter from the inside and exit to the outside.
                // Exiting outside arcs transition to the new layout.
                if (root !== p) enterArc = insideArc, exitArc = outsideArc, outsideAngle.range([p.x, p.x + p.dx]);

                d3.transition().duration(d3.event.altKey ? 7500 : 750).each(function() {
                    path.exit().transition()
                        .style("fill-opacity", function(d) { return d.depth === 1 + (root === p) ? 1 : 0; })
                        .attrTween("d", function(d) { return arcTween.call(this, exitArc(d)); })
                        .remove();

                    path.enter().append("path")
                        .style("fill-opacity", function(d) { return d.depth === 2 - (root === p) ? 1 : 0; })
                        .style("fill", function(d) { return d.fill; })
                        .on("click", zoomIn)
                        .on("mouseover", mouseOverArc)
                        .on("mousemove", mouseMoveArc)
                        .on("mouseout", mouseOutArc)
                        .each(function(d) { this._current = enterArc(d); });


                    path.transition()
                        .style("fill-opacity", 1)
                        .attrTween("d", function(d) { return arcTween.call(this, updateArc(d)); });



                });


                texts = texts.data(new_data, function(d) { return d.key; })

                texts.exit()
                    .remove()
                texts.enter()
                    .append("text")

                texts.style("opacity", 0)
                    .attr("transform", function(d) { return "rotate(" + computeTextRotation(d) + ")"; })
                    .attr("x", function(d) { return radius / 3 * d.depth; })
                    .attr("dx", "6") // margin
                    .attr("dy", ".35em") // vertical-align
                    .filter(filter_min_arc_size_text)
                    .text(function(d,i) {return d.name})
                    .transition().delay(750).style("opacity", 1)


            }

            function key(d) {
                var k = [], p = d;
                while (p.depth) k.push(p.name), p = p.parent;
                return k.reverse().join(".");
            }

            function fill(d) {
                var c = d3.lab(hue(d.lev));
                c.l = luminance(d.sum);
                return c;
            }

            function arcTween(b) {
                var i = d3.interpolate(this._current, b);
                this._current = i(0);
                return function(t) {
                    return arc(i(t));
                };
            }

            function updateArc(d) {
                return {depth: d.depth, x: d.x, dx: d.dx};
            }
            d3.select(self.frameElement).style("height", margin.top + margin.bottom + "px");

        </script>
    </div>
</div>
</div>
